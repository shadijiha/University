{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Shado",
    "patterns": [{
            "include": "#comments"
        },
        {
            "include": "#comments-javadoc"
        },
        {
            "include": "#predefined_macros"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#primitive-types"
        },
        {
            "include": "#object-types"
        },
        {
            "include": "#function-call"
        },
        {
            "include": "#functions"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [{
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.shado"
                        }
                    },
                    "match": "/\\*\\*/",
                    "name": "comment.block.empty.shado"
                },
                {
                    "include": "#comments-inline"
                }
            ]
        },
        "comments-inline": {
            "patterns": [{
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.shado"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.shado"
                },
                {
                    "begin": "(^[ \\t]+)?(?=//)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.shado"
                        }
                    },
                    "end": "(?!\\G)",
                    "patterns": [{
                        "begin": "//",
                        "beginCaptures": {
                            "0": {
                                "name": "punctuation.definition.comment.shado"
                            }
                        },
                        "end": "\\n",
                        "name": "comment.line.double-slash.shado"
                    }]
                }
            ]
        },
        "comments-javadoc": {
            "patterns": [{
                "begin": "^\\s*(/\\*\\*)(?!/)",
                "beginCaptures": {
                    "1": {
                        "name": "punctuation.definition.comment.shado"
                    }
                },
                "end": "\\*/",
                "endCaptures": {
                    "0": {
                        "name": "punctuation.definition.comment.shado"
                    }
                },
                "name": "comment.block.javadoc.java",
                "patterns": [{
                        "match": "@(author|deprecated|return|see|serial|since|version)\\b",
                        "name": "keyword.other.documentation.javadoc.shado"
                    },
                    {
                        "match": "(@param)\\s+(\\S+)",
                        "captures": {
                            "1": {
                                "name": "keyword.other.documentation.javadoc.shado"
                            },
                            "2": {
                                "name": "variable.parameter.shado"
                            }
                        }
                    },
                    {
                        "match": "(@(?:exception|throws))\\s+(\\S+)",
                        "captures": {
                            "1": {
                                "name": "keyword.other.documentation.javadoc.shado"
                            },
                            "2": {
                                "name": "entity.name.type.class.shado"
                            }
                        }
                    },
                    {
                        "match": "{(@link)\\s+(\\S+)?#([\\w$]+\\s*\\([^\\(\\)]*\\)).*?}",
                        "captures": {
                            "1": {
                                "name": "keyword.other.documentation.javadoc.shado"
                            },
                            "2": {
                                "name": "entity.name.type.class.shado"
                            },
                            "3": {
                                "name": "variable.parameter.shado"
                            }
                        }
                    }
                ]
            }]
        },
        "keywords": {
            "patterns": [{
                    "name": "keyword.control.shado",
                    "match": "(#(if|endif|include|error|stop|using))\\b"
                },
                {
                    "match": "\\bthrow\\b",
                    "name": "keyword.control.throw.java"
                },
                {
                    "match": "\\?|:",
                    "name": "keyword.control.ternary.java"
                },
                {
                    "match": "\\b(return|yield|break|case|continue|default|do|while|for|switch|if|else|new|class|struct|static|native|dynamic|public|protected|private|module)\\b",
                    "name": "keyword.control.java"
                },
                {
                    "match": "\\b(instanceof)\\b",
                    "name": "keyword.operator.instanceof.java"
                },
                {
                    "match": "(<<|>>>?|~|\\^)",
                    "name": "keyword.operator.bitwise.java"
                },
                {
                    "match": "((&|\\^|\\||<<|>>>?)=)",
                    "name": "keyword.operator.assignment.bitwise.java"
                },
                {
                    "match": "(===?|!=|<=|>=|<>|<|>)",
                    "name": "keyword.operator.comparison.java"
                },
                {
                    "match": "([+*/%-]=)",
                    "name": "keyword.operator.assignment.arithmetic.java"
                },
                {
                    "match": "(=)",
                    "name": "keyword.operator.assignment.java"
                },
                {
                    "match": "(\\-\\-|\\+\\+)",
                    "name": "keyword.operator.increment-decrement.java"
                },
                {
                    "match": "(\\-|\\+|\\*|\\/|%)",
                    "name": "keyword.operator.arithmetic.java"
                },
                {
                    "match": "(!|&&|\\|\\|)",
                    "name": "keyword.operator.logical.java"
                },
                {
                    "match": "(\\||&)",
                    "name": "keyword.operator.bitwise.java"
                },
                {
                    "match": "\\b(const|goto)\\b",
                    "name": "keyword.reserved.java"
                }
            ]
        },
        "numbers": {
            "patterns": [{
                    "match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)",
                    "name": "constant.numeric.hex.shado"
                },
                {
                    "match": "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)",
                    "name": "constant.numeric.binary.shado"
                },
                {
                    "match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
                    "name": "constant.numeric.octal.shado"
                },
                {
                    "match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
                    "name": "constant.numeric.decimal.shado"
                }
            ]
        },
        "primitive-types": {
            "match": "\\b(void|bool|char|int|float|double|function|string|object)\\b",
            "name": "storage.type.primitive.shado"
        },
        "object-types": {
            "patterns": [{
                    "begin": "\\b((?:[A-Za-z_]\\w*\\s*\\.\\s*)*)([A-Z_]\\w*)\\s*(?=\\[)",
                    "beginCaptures": {
                        "1": {
                            "patterns": [{
                                    "match": "[A-Za-z_]\\w*",
                                    "name": "storage.type.java"
                                },
                                {
                                    "match": "\\.",
                                    "name": "punctuation.separator.period.java"
                                }
                            ]
                        },
                        "2": {
                            "name": "storage.type.object.array.java"
                        }
                    },
                    "end": "(?!\\s*\\[)",
                    "patterns": [{
                        "include": "#comments"
                    }]
                },
                {
                    "match": "\\b((?:[A-Za-z_]\\w*\\s*\\.\\s*)*[A-Z_]\\w*)\\s*(?=<)",
                    "captures": {
                        "1": {
                            "patterns": [{
                                    "match": "[A-Za-z_]\\w*",
                                    "name": "storage.type.java"
                                },
                                {
                                    "match": "\\.",
                                    "name": "punctuation.separator.period.java"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "\\b((?:[A-Za-z_]\\w*\\s*\\.\\s*)*[A-Z_]\\w*)\\b((?=\\s*[A-Za-z$_\\n])|(?=\\s*\\.\\.\\.))",
                    "captures": {
                        "1": {
                            "patterns": [{
                                    "match": "[A-Za-z_]\\w*",
                                    "name": "storage.type.java"
                                },
                                {
                                    "match": "\\.",
                                    "name": "punctuation.separator.period.java"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.shado",
            "begin": "\"",
            "end": "\"",
            "patterns": [{
                "name": "constant.character.escape.shado",
                "match": "\\\\."
            }]
        },
        "functions": {
            "begin": "([A-Za-z_$][\\w$]*)\\s*(\\()",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function.shado"
                },
                "2": {
                    "name": "punctuation.definition.parameters.begin.bracket.round.shado"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.end.bracket.round.shado"
                }
            },
            "name": "meta.function-call.shado",
            "patterns": [{
                    "include": "#parameters"
                },
                {
                    "include": "#comments"
                }
            ]
        },
        "parameters": {
            "patterns": [{
                    "match": "\\bconst\\b",
                    "name": "storage.modifier.java"
                },
                {
                    "include": "#strings"
                },
                {
                    "match": "\\w+",
                    "name": "variable.parameter.java"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.delimiter.java"
                },
                {
                    "match": "\\.\\.\\.",
                    "name": "punctuation.definition.parameters.varargs.java"
                }
            ]
        },
        "predefined_macros": {
            "patterns": [{
                    "match": "(__FILE__|__LINE__|__DATE__|__PATH__)",
                    "name": "entity.name.other.preprocessor.macro.predefined.shado"
                },
                {
                    "match": "__([A-Z_]+)__",
                    "name": "entity.name.other.preprocessor.macro.predefined.probably.shado"
                }
            ]
        },
        "function-call": {
            "patterns": [{
                "match": "(?i)\\b(print|typeof|sleep|clear)\\b",
                "name": "support.function.construct.output.shado"
            }]
        }
    },
    "scopeName": "source.shado"
}